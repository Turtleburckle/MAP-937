ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 2
--------------------
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 2
--------------------
| Key: v -> Value: (int) 0
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 2
--------------------
| Key: v -> Value: (int) 0
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
| (int) 10
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
| (int) 10
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
| (int) 10
| (int) 22
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 3
Executable Stack 3
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 3
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 3
--------------------
| (int) 10
| (int) 22
Heap Table 3
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ]
| v=(int) 32;
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
| int v;
Symbolic Table 1
--------------------
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
| Ref int a;
Symbolic Table 1
--------------------
| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

| v=(int) 10;
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 0
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
| [New model.statement: varName-> a, expression -> (int) 22]

Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 0, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
| [ Fork ( [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ] )]
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
| Print (v)
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : [WriteHeap( a , (int) 30)] and [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
| Print ([ ReadHeap (a)])
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
| [WriteHeap( a , (int) 30)]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 22

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 1
Executable Stack 1
--------------------
Symbolic Table 1
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 1
--------------------
| (int) 10
| (int) 22
Heap Table 1
--------------------
| Key: 1 -> Value: (int) 30

ProgramState 2
Executable Stack 2
--------------------
| [Compound statement : v=(int) 32; and [Compound statement : Print (v) and Print ([ ReadHeap (a)]) ] ]
Symbolic Table 2
--------------------
| Key: a -> Value: [ REF value address: 1, location: int]

| Key: v -> Value: (int) 10
Output 2
--------------------
| (int) 10
| (int) 22
Heap Table 2
--------------------
| Key: 1 -> Value: (int) 30

