[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@2bef3279
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@2bef3279
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@264525d0
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@264525d0
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@6c881c2 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ]
model.statements.WriteHeapStatement@6c881c2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ]
model.statements.WriteHeapStatement@6c881c2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@6ef6447a) and model.statements.ForkStatement@444ee24e ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@444ee24e
[Print (model.expression.ReadHeapExpression@6ef6447a)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@444ee24e
[Print (model.expression.ReadHeapExpression@6ef6447a)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@444ee24e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@444ee24e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@13981ea6 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@13981ea6 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ]
model.statements.WriteHeapStatement@13981ea6
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ]
model.statements.WriteHeapStatement@13981ea6
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@38aed9f4) ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print (model.expression.ReadHeapExpression@38aed9f4)
[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4cc83de1 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@4cc83de1
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@4cc83de1
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@4544926c and [Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ]
model.statements.OpenFileStatement@4544926c
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ]
model.statements.OpenFileStatement@4544926c
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ]
model.statements.VariableDeclarationStatement@2bef3279
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ]
model.statements.VariableDeclarationStatement@2bef3279
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@264525d0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ]
model.statements.ReadFileStatement@264525d0
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ]
model.statements.ReadFileStatement@264525d0
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@e27dacd and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ]
model.statements.ReadFileStatement@e27dacd
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ]
model.statements.ReadFileStatement@e27dacd
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6f11fe97 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6f11fe97
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6f11fe97
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6f11fe97
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6f11fe97
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@5d14f915 and [Compound model.statement: model.statements.VariableDeclarationStatement@59c13e25 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@59c13e25 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@5d14f915
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@59c13e25 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@5d14f915
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@59c13e25 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@59c13e25 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@59c13e25
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@59c13e25
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@385b24eb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ]
model.statements.WriteHeapStatement@385b24eb
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ]
model.statements.WriteHeapStatement@385b24eb
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@41fb22d9) and model.statements.ForkStatement@60044164 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@60044164
[Print (model.expression.ReadHeapExpression@41fb22d9)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@60044164
[Print (model.expression.ReadHeapExpression@41fb22d9)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@60044164
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@60044164
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@2d122b94 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@2d122b94 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ]
model.statements.WriteHeapStatement@2d122b94
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ]
model.statements.WriteHeapStatement@2d122b94
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@4d63c04b) ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print (model.expression.ReadHeapExpression@4d63c04b)
[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print (model.expression.ReadHeapExpression@4d63c04b)
[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30][ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print (model.expression.ReadHeapExpression@4d63c04b)
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30][ INT value 32]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30][ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print (model.expression.ReadHeapExpression@4d63c04b)
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30][ INT value 32]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30][ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@547600e5 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@547600e5
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@547600e5
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@71a25bb9 and [Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ]
model.statements.OpenFileStatement@71a25bb9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ]
model.statements.OpenFileStatement@71a25bb9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@21c263be and [Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ]
model.statements.VariableDeclarationStatement@21c263be
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ]
model.statements.VariableDeclarationStatement@21c263be
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@45572e4b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ]
model.statements.ReadFileStatement@45572e4b
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ]
model.statements.ReadFileStatement@45572e4b
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6842a1d3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ]
model.statements.ReadFileStatement@6842a1d3
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ]
model.statements.ReadFileStatement@6842a1d3
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@bde40f1 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@bde40f1
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@bde40f1
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@bde40f1
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@bde40f1
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@7946f485 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ] ] ]
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@7946f485
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@7946f485
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING value]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING value]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 2:
Key: varf --> Value: [ STRING value]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 2:
Key: varf --> Value: [ STRING value]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.OpenFileStatement@1d735aca and [Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ]
model.statements.OpenFileStatement@1d735aca
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ]
model.statements.OpenFileStatement@1d735aca
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@3661101b and [Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ] ]
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ]
model.statements.VariableDeclarationStatement@3661101b
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ]
model.statements.VariableDeclarationStatement@3661101b
SymbolicTable 2:
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@62a13e38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ]
model.statements.ReadFileStatement@62a13e38
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ]
model.statements.ReadFileStatement@62a13e38
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.ReadFileStatement@2c8d1c35 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ] ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ]
model.statements.ReadFileStatement@2c8d1c35
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ]
model.statements.ReadFileStatement@2c8d1c35
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2b2fb664 ]
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
model.statements.CloseFileStatement@2b2fb664
[Print ([VariableExpression for ID = varc])
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
model.statements.CloseFileStatement@2b2fb664
[Print ([VariableExpression for ID = varc])
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
model.statements.CloseFileStatement@2b2fb664
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
model.statements.CloseFileStatement@2b2fb664
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 2:
[ INT value 0][ INT value 0]Heap 2:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1c94f775 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2f4595a5 and [Compound model.statement: model.statements.VariableDeclarationStatement@db1a95c and [Compound model.statement: model.statements.ReadFileStatement@36a5c8c0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@370d7a0b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@34e629f2 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2f4595a5 and [Compound model.statement: model.statements.VariableDeclarationStatement@db1a95c and [Compound model.statement: model.statements.ReadFileStatement@36a5c8c0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@370d7a0b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@34e629f2 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@1c94f775
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2f4595a5 and [Compound model.statement: model.statements.VariableDeclarationStatement@db1a95c and [Compound model.statement: model.statements.ReadFileStatement@36a5c8c0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@370d7a0b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@34e629f2 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@1c94f775
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2f4595a5 and [Compound model.statement: model.statements.VariableDeclarationStatement@db1a95c and [Compound model.statement: model.statements.ReadFileStatement@36a5c8c0 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@370d7a0b and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@34e629f2 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@341d9d7b and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@341d9d7b
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@341d9d7b
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@70e75a55 and [Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ]
model.statements.OpenFileStatement@70e75a55
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ]
model.statements.OpenFileStatement@70e75a55
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@754b5402 and [Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ]
model.statements.VariableDeclarationStatement@754b5402
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ]
model.statements.VariableDeclarationStatement@754b5402
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2d65f995 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ]
model.statements.ReadFileStatement@2d65f995
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ]
model.statements.ReadFileStatement@2d65f995
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@341d2df9 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ]
model.statements.ReadFileStatement@341d2df9
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ]
model.statements.ReadFileStatement@341d2df9
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7ee2fcdd ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@656bbb3e and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@656bbb3e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@656bbb3e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@7e85d3b9 and [Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ]
model.statements.OpenFileStatement@7e85d3b9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ]
model.statements.OpenFileStatement@7e85d3b9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@888b714 and [Compound model.statement: model.statements.ReadFileStatement@30825f70 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@89f635a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@58d761eb ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2bef3279 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@e27dacd and [Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@e27dacd and [Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@2bef3279
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@e27dacd and [Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@e27dacd and [Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@e27dacd and [Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ]
model.statements.OpenFileStatement@e27dacd
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6f11fe97 and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ]
model.statements.VariableDeclarationStatement@6f11fe97
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ]
model.statements.ReadFileStatement@3d3f65f6
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ]
model.statements.ReadFileStatement@32dbbc24
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@21af900 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@21af900
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@21af900
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 0][ INT value 0]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4544926c and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@264525d0 and [Compound model.statement: model.statements.VariableDeclarationStatement@e27dacd and [Compound model.statement: model.statements.ReadFileStatement@6f11fe97 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@3d3f65f6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@32dbbc24 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@36fbf307 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@7c74d928 and [Compound model.statement: model.statements.VariableDeclarationStatement@672cac5e and [Compound model.statement: model.statements.ReadFileStatement@ea61877 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@12e8dd1f and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@480ffbf3 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@263c62a and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@672cac5e and [Compound model.statement: model.statements.VariableDeclarationStatement@ea61877 and [Compound model.statement: model.statements.ReadFileStatement@12e8dd1f and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@480ffbf3 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@4ac3e0f0 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@264525d0 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@264525d0
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@264525d0
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@6f11fe97 and [Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ]
model.statements.OpenFileStatement@6f11fe97
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@3d3f65f6 and [Compound model.statement: model.statements.ReadFileStatement@32dbbc24 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@21af900 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@629f5a92 ] ] ] ] ]
model.statements.OpenFileStatement@6f11fe97
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@a7687b8 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@a7687b8
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@a7687b8
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@5fd390e9 and [Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ]
model.statements.OpenFileStatement@5fd390e9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ]
model.statements.OpenFileStatement@5fd390e9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@15657cd9 and [Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ]
model.statements.VariableDeclarationStatement@15657cd9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ]
model.statements.VariableDeclarationStatement@15657cd9
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2b10728a and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ]
model.statements.ReadFileStatement@2b10728a
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ]
model.statements.ReadFileStatement@2b10728a
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@2e85718c and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ]
model.statements.ReadFileStatement@2e85718c
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ]
model.statements.ReadFileStatement@2e85718c
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@6d12e86d ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6d12e86d
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6d12e86d
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6d12e86d
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@6d12e86d
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@5fd390e9 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@5fd390e9
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@5fd390e9
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@2b10728a and [Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ]
model.statements.OpenFileStatement@2b10728a
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ]
model.statements.OpenFileStatement@2b10728a
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2e85718c and [Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ]
model.statements.VariableDeclarationStatement@2e85718c
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ]
model.statements.VariableDeclarationStatement@2e85718c
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@6d12e86d and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ]
model.statements.ReadFileStatement@6d12e86d
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ]
model.statements.ReadFileStatement@6d12e86d
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@53afd2a2 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ]
model.statements.ReadFileStatement@53afd2a2
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ]
model.statements.ReadFileStatement@53afd2a2
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@7b837e7f ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@7b837e7f
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@7b837e7f
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@7b837e7f
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@7b837e7f
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@509e0c12 and [Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@509e0c12
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@509e0c12
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]
 and [Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ]
[Assign to varf the value [Value Expression for value = [ STRING valuetest.in]]]

SymbolicTable 1:
Key: varf --> Value: [ STRING value]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.OpenFileStatement@1245f7e3 and [Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ]
model.statements.OpenFileStatement@1245f7e3
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ]
model.statements.OpenFileStatement@1245f7e3
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7ddd4dd3 and [Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ] ]
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ]
model.statements.VariableDeclarationStatement@7ddd4dd3
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ]
model.statements.VariableDeclarationStatement@7ddd4dd3
SymbolicTable 1:
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@5d0330e6 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ]
model.statements.ReadFileStatement@5d0330e6
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ]
model.statements.ReadFileStatement@5d0330e6
SymbolicTable 1:
Key: varc --> Value: [ INT value 0]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and [Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ]
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ReadFileStatement@13e8cd38 and [Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ] ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ]
model.statements.ReadFileStatement@13e8cd38
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ]
model.statements.ReadFileStatement@13e8cd38
SymbolicTable 1:
Key: varc --> Value: [ INT value 1]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = varc]) and model.statements.CloseFileStatement@2e2fca49 ]
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@2e2fca49
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@2e2fca49
[Print ([VariableExpression for ID = varc])
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@2e2fca49
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.CloseFileStatement@2e2fca49
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: varc --> Value: [ INT value 15]
Key: varf --> Value: [ STRING valuetest.in]
Output 1:
[ INT value 1][ INT value 15]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@4705eb18 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@53ba0e64 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4705eb18 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@53ba0e64 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@5c34c8c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4705eb18 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@53ba0e64 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@5c34c8c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4705eb18 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@53ba0e64 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 1:
Key: a --> Value: Boolean value false
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@2ae54690 and [Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ] ] and [Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@2ae54690 and [Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@2ae54690 and [Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ]
model.statements.VariableDeclarationStatement@2ae54690
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ]
model.statements.VariableDeclarationStatement@2ae54690
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@18eb71a7 and model.statements.VariableDeclarationStatement@565282dd ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@565282dd
model.statements.VariableDeclarationStatement@18eb71a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@565282dd
model.statements.VariableDeclarationStatement@18eb71a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@565282dd
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@565282dd
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ] and [Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@76c6f89 and model.statements.WriteHeapStatement@73d7832 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@73d7832
model.statements.WriteHeapStatement@76c6f89
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@73d7832
model.statements.WriteHeapStatement@76c6f89
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@4418473b and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@69e710f and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@73d7832
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@3fd33e8d and [Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ] ] and [Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@3fd33e8d and [Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@3fd33e8d and [Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ]
model.statements.VariableDeclarationStatement@3fd33e8d
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ]
model.statements.VariableDeclarationStatement@3fd33e8d
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
[Compound model.statement: model.statements.VariableDeclarationStatement@64c569d2 and model.statements.VariableDeclarationStatement@637645b7 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@637645b7
model.statements.VariableDeclarationStatement@64c569d2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@637645b7
model.statements.VariableDeclarationStatement@64c569d2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@637645b7
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
model.statements.VariableDeclarationStatement@637645b7
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ] and [Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@75aba191 and model.statements.WriteHeapStatement@532adeff ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@532adeff
model.statements.WriteHeapStatement@75aba191
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@1ceeb6b1 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4d640366 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@532adeff
model.statements.WriteHeapStatement@75aba191
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@2469d186 and [Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ] ] and [Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@2469d186 and [Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@2469d186 and [Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@2469d186 and [Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@2469d186 and [Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ]
model.statements.VariableDeclarationStatement@2469d186
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ]
model.statements.VariableDeclarationStatement@2469d186
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@34904bc3 and model.statements.VariableDeclarationStatement@54487c9d ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
model.statements.VariableDeclarationStatement@54487c9d
model.statements.VariableDeclarationStatement@34904bc3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
model.statements.VariableDeclarationStatement@54487c9d
model.statements.VariableDeclarationStatement@34904bc3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
model.statements.VariableDeclarationStatement@54487c9d
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
model.statements.VariableDeclarationStatement@54487c9d
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6c095854 and model.statements.WriteHeapStatement@60641b2 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@60641b2
model.statements.WriteHeapStatement@6c095854
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@30fedce2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@2745e2f4 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@60641b2
model.statements.WriteHeapStatement@6c095854
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@3c69bda and [Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ] ] and [Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ] ] and [Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@3c69bda and [Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ] ] and [Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@3c69bda and [Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ] ] and [Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@3c69bda and [Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@3c69bda and [Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ]
model.statements.VariableDeclarationStatement@3c69bda
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ]
model.statements.VariableDeclarationStatement@3c69bda
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@43709629 and model.statements.VariableDeclarationStatement@4860f69e ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
model.statements.VariableDeclarationStatement@4860f69e
model.statements.VariableDeclarationStatement@43709629
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
model.statements.VariableDeclarationStatement@4860f69e
model.statements.VariableDeclarationStatement@43709629
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
model.statements.VariableDeclarationStatement@4860f69e
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
model.statements.VariableDeclarationStatement@4860f69e
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@c275a61 and model.statements.WriteHeapStatement@3b080874 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@3b080874
model.statements.WriteHeapStatement@c275a61
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c0e10e2 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@3395ddfb and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@3b080874
model.statements.WriteHeapStatement@c275a61
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and model.statements.VariableDeclarationStatement@4705eb18 ] and [Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ] ] and [Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and model.statements.VariableDeclarationStatement@4705eb18 ] and [Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and model.statements.VariableDeclarationStatement@4705eb18 ] and [Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and model.statements.VariableDeclarationStatement@4705eb18 ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@5c34c8c3 and model.statements.VariableDeclarationStatement@4705eb18 ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
model.statements.VariableDeclarationStatement@4705eb18
model.statements.VariableDeclarationStatement@5c34c8c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
model.statements.VariableDeclarationStatement@4705eb18
model.statements.VariableDeclarationStatement@5c34c8c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
model.statements.VariableDeclarationStatement@4705eb18
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
model.statements.VariableDeclarationStatement@4705eb18
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@41efe2c0 and model.statements.WriteHeapStatement@53ba0e64 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@53ba0e64
model.statements.WriteHeapStatement@41efe2c0
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@2932a600 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@4107c515 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@53ba0e64
model.statements.WriteHeapStatement@41efe2c0
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@6062b897 and [Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ] ] and [Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@6062b897 and [Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@6062b897 and [Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@6062b897 and [Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@6062b897 and [Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ]
model.statements.VariableDeclarationStatement@6062b897
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ]
model.statements.VariableDeclarationStatement@6062b897
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@183dff1e and model.statements.VariableDeclarationStatement@4fe84196 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
model.statements.VariableDeclarationStatement@4fe84196
model.statements.VariableDeclarationStatement@183dff1e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
model.statements.VariableDeclarationStatement@4fe84196
model.statements.VariableDeclarationStatement@183dff1e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
model.statements.VariableDeclarationStatement@4fe84196
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
model.statements.VariableDeclarationStatement@4fe84196
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
[Compound model.statement: model.statements.WriteHeapStatement@7ee62fc9 and model.statements.WriteHeapStatement@b359682 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@b359682
model.statements.WriteHeapStatement@7ee62fc9
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: model.statements.IfAssignStatement@7c874df5 and [Print ([VariableExpression for ID = v]) ] and [Compound model.statement: model.statements.IfAssignStatement@71ee4702 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.WriteHeapStatement@b359682
model.statements.WriteHeapStatement@7ee62fc9
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ] and [Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
model.statements.VariableDeclarationStatement@60044164
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
model.statements.VariableDeclarationStatement@60044164
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
model.statements.VariableDeclarationStatement@16a95d80
model.statements.VariableDeclarationStatement@77b443e1
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
model.statements.VariableDeclarationStatement@16a95d80
model.statements.VariableDeclarationStatement@77b443e1
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
model.statements.VariableDeclarationStatement@16a95d80
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
model.statements.VariableDeclarationStatement@16a95d80
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@4c1137a8
model.statements.WriteHeapStatement@e5c4866
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@4c1137a8
model.statements.WriteHeapStatement@e5c4866
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@4c1137a8
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ] and [Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@60044164 and [Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
model.statements.VariableDeclarationStatement@60044164
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
model.statements.VariableDeclarationStatement@60044164
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@77b443e1 and model.statements.VariableDeclarationStatement@16a95d80 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.IfAssignStatement@19efce80 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@4576c560 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@e5c4866 and model.statements.WriteHeapStatement@4c1137a8 ]
model.statements.VariableDeclarationStatement@16a95d80
model.statements.VariableDeclarationStatement@77b443e1
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@60011396 and [Compound model.statement: model.statements.VariableDeclarationStatement@58e6d019 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@58e6d019 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@60011396
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@58e6d019 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@60011396
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@58e6d019 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 4:
Key: a --> Value: Boolean value false
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@58e6d019 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 4:
Key: a --> Value: Boolean value false
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.VariableDeclarationStatement@58e6d019
SymbolicTable 4:
Key: a --> Value: Boolean value false
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.VariableDeclarationStatement@58e6d019
SymbolicTable 4:
Key: a --> Value: Boolean value false
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ]
SymbolicTable 4:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ] ]
SymbolicTable 4:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ]
[Assign to a the value [Value Expression for value = Boolean value true]]

SymbolicTable 4:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ]
[Assign to a the value [Value Expression for value = Boolean value true]]

SymbolicTable 4:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ]
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.IfStatement@c0b0600 and [Print ([VariableExpression for ID = v]) ]
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print ([VariableExpression for ID = v])
model.statements.IfStatement@c0b0600
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print ([VariableExpression for ID = v])
model.statements.IfStatement@c0b0600
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print ([VariableExpression for ID = v])
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print ([VariableExpression for ID = v])
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 4:
[ INT value 2]Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
SymbolicTable 4:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 4:
[ INT value 2]Heap 4:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4b1c31c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ] ] and [Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4b1c31c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4b1c31c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@4b1c31c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@4b1c31c3 and [Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ]
model.statements.VariableDeclarationStatement@4b1c31c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ]
model.statements.VariableDeclarationStatement@4b1c31c3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
[Compound model.statement: model.statements.VariableDeclarationStatement@1e1b0359 and model.statements.VariableDeclarationStatement@6c881c2 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
model.statements.VariableDeclarationStatement@6c881c2
model.statements.VariableDeclarationStatement@1e1b0359
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
model.statements.VariableDeclarationStatement@6c881c2
model.statements.VariableDeclarationStatement@1e1b0359
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6ef6447a and model.statements.WriteHeapStatement@444ee24e ]
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@444ee24e
model.statements.WriteHeapStatement@6ef6447a
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@2893055 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@408d6757 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.WriteHeapStatement@444ee24e
model.statements.WriteHeapStatement@6ef6447a
SymbolicTable 1:
Key: b --> Value: [ REF value address: 0, location: INT]

Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4d5c7108 and [Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ] ] and [Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4d5c7108 and [Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: [Compound model.statement: model.statements.VariableDeclarationStatement@4d5c7108 and [Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ] ] and [Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@4d5c7108 and [Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@4d5c7108 and [Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ]
model.statements.VariableDeclarationStatement@4d5c7108
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ]
model.statements.VariableDeclarationStatement@4d5c7108
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.IfAssignStatement@598f76f5 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: model.statements.IfAssignStatement@70557ec6 and [Print ([VariableExpression for ID = v]) ] ] ]
[Compound model.statement: model.statements.WriteHeapStatement@6fdd5bf and model.statements.WriteHeapStatement@28872059 ]
[Compound model.statement: model.statements.VariableDeclarationStatement@39291a16 and model.statements.VariableDeclarationStatement@e74f0e2 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@385b24eb and [Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@385b24eb
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@385b24eb
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6cec742f and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@6cec742f
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@6cec742f
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@456a49ac and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
model.statements.VariableDeclarationStatement@456a49ac
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
model.statements.VariableDeclarationStatement@456a49ac
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@48978461 ]
model.statements.VariableDeclarationStatement@39a0d270
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@48978461 ]
model.statements.VariableDeclarationStatement@39a0d270
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@48978461 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@48978461 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@605d4110
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@605d4110
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c1eae17]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c1eae17]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c1eae17]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c1eae17]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@605d4110
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c1eae17]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@605d4110
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c1eae17]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c1eae17]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c1eae17]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@48978461
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@3c1eae17]

[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.VariableDeclarationStatement@456a49ac and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ] ]
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
model.statements.VariableDeclarationStatement@456a49ac
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
model.statements.VariableDeclarationStatement@456a49ac
SymbolicTable 4:
Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ] ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 4:
Heap 4:
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.ForStatement@2905aad0 and [Print (model.expression.ReadHeapExpression@6cec742f) ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@15b378aa ]
model.statements.VariableDeclarationStatement@5e84ecbe
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@15b378aa ]
model.statements.VariableDeclarationStatement@5e84ecbe
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@15b378aa ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@15b378aa ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@6d451388
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@6d451388
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@21b640d3]
 ]
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@21b640d3]
 ]
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

[Print ([VariableExpression for ID = v])
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

[Print ([VariableExpression for ID = v])
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@6d451388
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@6d451388
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 6:
Executable Stack 6:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@21b640d3]
 ]
SymbolicTable 6:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 6:
[ INT value 0]Heap 6:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 6:
Executable Stack 6:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@21b640d3]
 ]
SymbolicTable 6:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 6:
[ INT value 0]Heap 6:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 6:
Executable Stack 6:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

[Print ([VariableExpression for ID = v])
SymbolicTable 6:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 6:
[ INT value 0]Heap 6:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@6d451388
SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0][ INT value 1]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0][ INT value 1]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 6:
Executable Stack 6:
[Assign to v the value model.expression.ArithmeticExpression@21b640d3]

SymbolicTable 6:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 6:
[ INT value 0][ INT value 1]Heap 6:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Print (model.expression.ReadHeapExpression@6cec742f)
model.statements.ForStatement@2905aad0
model.statements.WhileStatement@15b378aa
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 4:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 1]
Output 4:
[ INT value 0][ INT value 1]Heap 4:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 5:
Executable Stack 5:
SymbolicTable 5:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 0]
Output 5:
[ INT value 0][ INT value 1]Heap 5:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 6:
Executable Stack 6:
SymbolicTable 6:
Key: a --> Value: [ REF value address: 2, location: INT]

Key: v --> Value: [ INT value 20]
Output 6:
[ INT value 0][ INT value 1]Heap 6:
Key: 2 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@629f5a92 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ] ]
model.statements.VariableDeclarationStatement@629f5a92
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ] ]
model.statements.VariableDeclarationStatement@629f5a92
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2febe3f4 and [Print (model.expression.ReadHeapExpression@64ab75c4) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@d2920f3 ]
model.statements.VariableDeclarationStatement@454dae5
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@d2920f3 ]
model.statements.VariableDeclarationStatement@454dae5
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@d2920f3 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@d2920f3 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@39640f54
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@39640f54
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@543c40ea]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@543c40ea]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@543c40ea]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@543c40ea]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@39640f54
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@543c40ea]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

model.statements.ForkStatement@39640f54
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@543c40ea]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@543c40ea]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@64ab75c4)
model.statements.ForStatement@2febe3f4
model.statements.WhileStatement@d2920f3
[Assign to v the value [Value Expression for value = [ INT value 1]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@543c40ea]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@57090b3 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ] ]
model.statements.VariableDeclarationStatement@57090b3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ] ]
model.statements.VariableDeclarationStatement@57090b3
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@70557ec6 and [Print (model.expression.ReadHeapExpression@186d1d5e) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@3a7bc354 ]
model.statements.VariableDeclarationStatement@6a91d06b
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@3a7bc354 ]
model.statements.VariableDeclarationStatement@6a91d06b
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@3a7bc354 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@3a7bc354 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

model.statements.ForkStatement@28e95f2e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

model.statements.ForkStatement@28e95f2e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@306f594]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@306f594]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@306f594]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@306f594]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

model.statements.ForkStatement@28e95f2e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@306f594]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

model.statements.ForkStatement@28e95f2e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@306f594]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@306f594]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@186d1d5e)
model.statements.ForStatement@70557ec6
model.statements.WhileStatement@3a7bc354
[Assign to v the value model.expression.ArithmeticExpression@4ec3f634]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@306f594]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6c881c2 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
model.statements.VariableDeclarationStatement@27f3e11
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
model.statements.VariableDeclarationStatement@27f3e11
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
model.statements.ForStatement@3d456ecf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
model.statements.ForStatement@3d456ecf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

model.statements.ForkStatement@5e456a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

model.statements.ForkStatement@5e456a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

model.statements.ForkStatement@5e456a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

model.statements.ForkStatement@5e456a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

model.statements.ForkStatement@5e456a7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@6b9de0e9]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6a2e69cc ]
model.statements.WhileStatement@6a2e69cc
[Assign to v the value model.expression.ArithmeticExpression@1c1d3ce1]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 20]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@650ccf77 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ] ]
model.statements.VariableDeclarationStatement@650ccf77
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ] ]
model.statements.VariableDeclarationStatement@650ccf77
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1af50d67 and [Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ]
model.statements.VariableDeclarationStatement@1af50d67
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ]
model.statements.VariableDeclarationStatement@1af50d67
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@5854b6ba and [Print (model.expression.ReadHeapExpression@17399188) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
model.statements.ForStatement@5854b6ba
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
model.statements.ForStatement@5854b6ba
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@281f2fad ]
model.statements.WhileStatement@281f2fad
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@281f2fad ]
model.statements.WhileStatement@281f2fad
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@281f2fad ]
model.statements.WhileStatement@281f2fad
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@281f2fad ]
model.statements.WhileStatement@281f2fad
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@17399188)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@281f2fad ]
model.statements.WhileStatement@281f2fad
[Assign to v the value model.expression.ArithmeticExpression@3f174836]

model.statements.ForkStatement@31d0a07c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@5f9bf46e and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ] ]
model.statements.VariableDeclarationStatement@5f9bf46e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ] ]
model.statements.VariableDeclarationStatement@5f9bf46e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@8d17df7 and [Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ]
model.statements.VariableDeclarationStatement@8d17df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ]
model.statements.VariableDeclarationStatement@8d17df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@2337f5cc and [Print (model.expression.ReadHeapExpression@7b19f6d2) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
model.statements.ForStatement@2337f5cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
model.statements.ForStatement@2337f5cc
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value model.expression.ArithmeticExpression@691d074e]

model.statements.ForkStatement@61099a35
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value model.expression.ArithmeticExpression@691d074e]

model.statements.ForkStatement@61099a35
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value model.expression.ArithmeticExpression@691d074e]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@761b5936]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
[Assign to v the value model.expression.ArithmeticExpression@691d074e]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@761b5936]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@761b5936]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@7b19f6d2)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@588f3fec ]
model.statements.WhileStatement@588f3fec
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@761b5936]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@44d8ec54 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ] ]
model.statements.VariableDeclarationStatement@44d8ec54
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ] ]
model.statements.VariableDeclarationStatement@44d8ec54
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6b6f9ff4 and [Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ]
model.statements.VariableDeclarationStatement@6b6f9ff4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ]
model.statements.VariableDeclarationStatement@6b6f9ff4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7056ca2 and [Print (model.expression.ReadHeapExpression@16213cab) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@16213cab)
model.statements.ForStatement@7056ca2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@16213cab)
model.statements.ForStatement@7056ca2
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@16213cab)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@18647a7 ]
model.statements.WhileStatement@18647a7
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4a4a7be and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
model.statements.VariableDeclarationStatement@4a4a7be
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
model.statements.VariableDeclarationStatement@4a4a7be
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
model.statements.VariableDeclarationStatement@274f02ef
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
model.statements.VariableDeclarationStatement@274f02ef
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
model.statements.ForStatement@31640df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
model.statements.ForStatement@31640df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

model.statements.ForkStatement@7a455ba4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

model.statements.ForkStatement@7a455ba4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@a70e25b]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@a70e25b]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

model.statements.ForkStatement@7a455ba4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

model.statements.ForkStatement@7a455ba4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@a70e25b]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@a70e25b]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6383ea6c ]
model.statements.WhileStatement@6383ea6c
[Assign to v the value model.expression.ArithmeticExpression@6e9119f]

model.statements.ForkStatement@7a455ba4
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@a70e25b]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@2f4595a5 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ] ]
model.statements.VariableDeclarationStatement@2f4595a5
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ] ]
model.statements.VariableDeclarationStatement@2f4595a5
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@341d2df9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ]
model.statements.VariableDeclarationStatement@341d2df9
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ]
model.statements.VariableDeclarationStatement@341d2df9
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@7ee2fcdd and [Print (model.expression.ReadHeapExpression@51a65c47) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@51a65c47)
model.statements.ForStatement@7ee2fcdd
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@51a65c47)
model.statements.ForStatement@7ee2fcdd
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@51a65c47)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@3ff6f544 ]
model.statements.WhileStatement@3ff6f544
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@4a4a7be and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
model.statements.VariableDeclarationStatement@4a4a7be
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
model.statements.VariableDeclarationStatement@4a4a7be
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@274f02ef and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
model.statements.VariableDeclarationStatement@274f02ef
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
model.statements.VariableDeclarationStatement@274f02ef
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@31640df7 and [Print (model.expression.ReadHeapExpression@5d84a469) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
model.statements.ForStatement@31640df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
model.statements.ForStatement@31640df7
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

model.statements.ForkStatement@3c3d87e0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

model.statements.ForkStatement@3c3d87e0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@299696a0]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@299696a0]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@299696a0]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@299696a0]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

model.statements.ForkStatement@3c3d87e0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@299696a0]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

model.statements.ForkStatement@3c3d87e0
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@299696a0]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@299696a0]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
[Assign to v the value model.expression.ArithmeticExpression@5893161d]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@299696a0]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@5d84a469)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@198fa8bf ]
model.statements.WhileStatement@198fa8bf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@299696a0]

[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@a7f5cc0 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ] ]
model.statements.VariableDeclarationStatement@a7f5cc0
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ] ]
model.statements.VariableDeclarationStatement@a7f5cc0
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@501ddaeb and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ]
model.statements.VariableDeclarationStatement@501ddaeb
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ]
model.statements.VariableDeclarationStatement@501ddaeb
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@57097d1e and [Print (model.expression.ReadHeapExpression@12079c42) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@12079c42)
model.statements.ForStatement@57097d1e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@12079c42)
model.statements.ForStatement@57097d1e
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@12079c42)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@77089702 ]
model.statements.WhileStatement@77089702
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@30065c11 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ] ]
model.statements.VariableDeclarationStatement@30065c11
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ] ]
model.statements.VariableDeclarationStatement@30065c11
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@331df530 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ]
model.statements.VariableDeclarationStatement@331df530
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ]
model.statements.VariableDeclarationStatement@331df530
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@16b729f1 and [Print (model.expression.ReadHeapExpression@36ed0082) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
model.statements.ForStatement@16b729f1
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
model.statements.ForStatement@16b729f1
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

model.statements.ForkStatement@549ada16
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

model.statements.ForkStatement@549ada16
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@78c2e04e]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@78c2e04e]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@78c2e04e]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@78c2e04e]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

model.statements.ForkStatement@549ada16
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@78c2e04e]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

model.statements.ForkStatement@549ada16
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@78c2e04e]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@78c2e04e]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@36ed0082)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@6ab86663 ]
model.statements.WhileStatement@6ab86663
[Assign to v the value model.expression.ArithmeticExpression@7db820bc]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@78c2e04e]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6c881c2 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ]
model.statements.VariableDeclarationStatement@6c881c2
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@27f3e11 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
model.statements.VariableDeclarationStatement@27f3e11
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
model.statements.VariableDeclarationStatement@27f3e11
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and [Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.ForStatement@3d456ecf and [Print (model.expression.ReadHeapExpression@4a0b8967) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
model.statements.ForStatement@3d456ecf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
model.statements.ForStatement@3d456ecf
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value [Value Expression for value = [ INT value 0]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

model.statements.ForkStatement@141cb471
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

model.statements.ForkStatement@141cb471
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]
 ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

model.statements.ForkStatement@141cb471
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

model.statements.ForkStatement@141cb471
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]
 ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

model.statements.ForkStatement@141cb471
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Assign to v the value model.expression.ArithmeticExpression@3c02c3e0]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 1]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
[Assign to v the value model.expression.ArithmeticExpression@1b9be406]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 2]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 20]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print (model.expression.ReadHeapExpression@4a0b8967)
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 0]]]
 and model.statements.WhileStatement@1e92334f ]
model.statements.WhileStatement@1e92334f
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 3]
Output 1:
[ INT value 0][ INT value 1]Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 0]
Output 2:
[ INT value 0][ INT value 1]Heap 2:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 20]
Output 3:
[ INT value 0][ INT value 1]Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@741f796e and [Compound model.statement: model.statements.VariableDeclarationStatement@51013ee5 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@51013ee5 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@741f796e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@51013ee5 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@741f796e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@51013ee5 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@51013ee5 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@51013ee5
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@51013ee5
SymbolicTable 1:
Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.WriteHeapStatement@602a0fa9 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ]
model.statements.WriteHeapStatement@602a0fa9
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ]
model.statements.WriteHeapStatement@602a0fa9
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 10]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ]
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@2df95a9a) and model.statements.ForkStatement@22a29242 ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@22a29242
[Print (model.expression.ReadHeapExpression@2df95a9a)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@22a29242
[Print (model.expression.ReadHeapExpression@2df95a9a)
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@22a29242
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
model.statements.ForkStatement@22a29242
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@719e3f1 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@e1f58db) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.WriteHeapStatement@719e3f1 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@e1f58db) ] ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@e1f58db) ] ]
model.statements.WriteHeapStatement@719e3f1
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 1:
[ INT value 32][ INT value 30]Heap 1:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@e1f58db) ] ]
SymbolicTable 2:
Key: a --> Value: [ REF value address: 1, location: INT]

Key: v --> Value: [ INT value 32]
Output 2:
[ INT value 32][ INT value 30]Heap 2:
Key: 1 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@1ebc7b5e and [Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@1ebc7b5e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@1ebc7b5e
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 1:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@6ac59209 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@6ac59209
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@6ac59209
SymbolicTable 1:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 1:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = a])
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 1:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 1:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@4448f48d and [Compound model.statement: model.statements.VariableDeclarationStatement@294ed4b and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ] ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@294ed4b and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@4448f48d
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@294ed4b and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@4448f48d
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@294ed4b and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ] ]
SymbolicTable 3:
Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@294ed4b and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ] ]
SymbolicTable 3:
Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@294ed4b
SymbolicTable 3:
Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ]
model.statements.VariableDeclarationStatement@294ed4b
SymbolicTable 3:
Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 10]]]
 and [Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ]
[Assign to v the value [Value Expression for value = [ INT value 10]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 0]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]
 and [Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ]
[New model.statement: varName-> a, expression -> [Value Expression for value = [ INT value 22]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.WriteHeapStatement@21db7d95 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ]
model.statements.WriteHeapStatement@21db7d95
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ]
model.statements.WriteHeapStatement@21db7d95
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 22]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ]
[Assign to v the value [Value Expression for value = [ INT value 32]]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 10]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ]
[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ]
[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print (model.expression.ReadHeapExpression@70722164) and model.statements.ForkStatement@739d4f7b ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
model.statements.ForkStatement@739d4f7b
[Print (model.expression.ReadHeapExpression@70722164)
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
model.statements.ForkStatement@739d4f7b
[Print (model.expression.ReadHeapExpression@70722164)
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
model.statements.ForkStatement@739d4f7b
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32][ INT value 30]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
model.statements.ForkStatement@739d4f7b
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32][ INT value 30]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32][ INT value 30]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.WriteHeapStatement@3ead5fe4 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@7c390b40) ] ] ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 4:
[ INT value 32][ INT value 30]Heap 4:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32][ INT value 30]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: model.statements.WriteHeapStatement@3ead5fe4 and [Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@7c390b40) ] ] ]
SymbolicTable 4:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 4:
[ INT value 32][ INT value 30]Heap 4:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 3:
[ INT value 32][ INT value 30]Heap 3:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 4:
Executable Stack 4:
[Compound model.statement: [Assign to v the value [Value Expression for value = [ INT value 32]]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print (model.expression.ReadHeapExpression@7c390b40) ] ]
model.statements.WriteHeapStatement@3ead5fe4
SymbolicTable 4:
Key: a --> Value: [ REF value address: 3, location: INT]

Key: v --> Value: [ INT value 32]
Output 4:
[ INT value 32][ INT value 30]Heap 4:
Key: 3 --> Value: [ INT value 30]
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@36a30e9c and [Compound model.statement: model.statements.VariableDeclarationStatement@7030979b and [Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ] ] ]
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7030979b and [Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ] ]
model.statements.VariableDeclarationStatement@36a30e9c
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7030979b and [Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ] ]
model.statements.VariableDeclarationStatement@36a30e9c
SymbolicTable 1:
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7030979b and [Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: model.statements.VariableDeclarationStatement@7030979b and [Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ] ]
SymbolicTable 1:
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ]
model.statements.VariableDeclarationStatement@7030979b
SymbolicTable 1:
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ]
model.statements.VariableDeclarationStatement@7030979b
SymbolicTable 1:
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ]
SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]
 and [Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ] ]
SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ]
[Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]

SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ]
[Assign to a the value model.expression.ArithmeticExpression@12c8bcfe]

SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 0]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ]
SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Compound model.statement: [Assign to b the value model.expression.ArithmeticExpression@1eadcd93]
 and [Print ([VariableExpression for ID = b]) ]
SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = b])
[Assign to b the value model.expression.ArithmeticExpression@1eadcd93]

SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = b])
[Assign to b the value model.expression.ArithmeticExpression@1eadcd93]

SymbolicTable 1:
Key: b --> Value: [ INT value 0]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = b])
SymbolicTable 1:
Key: b --> Value: [ INT value 18]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
[Print ([VariableExpression for ID = b])
SymbolicTable 1:
Key: b --> Value: [ INT value 18]
Key: a --> Value: [ INT value 17]
Output 1:
Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: b --> Value: [ INT value 18]
Key: a --> Value: [ INT value 17]
Output 1:
[ INT value 18]Heap 1:
]
5_____________________

[ProgramState 1:
Executable Stack 1:
SymbolicTable 1:
Key: b --> Value: [ INT value 18]
Key: a --> Value: [ INT value 17]
Output 1:
[ INT value 18]Heap 1:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@1ad215ad and [Compound model.statement: model.statements.VariableDeclarationStatement@4cedefa9 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ] ] ]
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@4cedefa9 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@1ad215ad
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@4cedefa9 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ] ]
model.statements.VariableDeclarationStatement@1ad215ad
SymbolicTable 2:
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@4cedefa9 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 2:
Key: a --> Value: Boolean value false
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.VariableDeclarationStatement@4cedefa9 and [Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ] ]
SymbolicTable 2:
Key: a --> Value: Boolean value false
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.VariableDeclarationStatement@4cedefa9
SymbolicTable 2:
Key: a --> Value: Boolean value false
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ]
model.statements.VariableDeclarationStatement@4cedefa9
SymbolicTable 2:
Key: a --> Value: Boolean value false
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ]
SymbolicTable 2:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: [Assign to a the value [Value Expression for value = Boolean value true]]
 and [Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ] ]
SymbolicTable 2:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ]
[Assign to a the value [Value Expression for value = Boolean value true]]

SymbolicTable 2:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ]
[Assign to a the value [Value Expression for value = Boolean value true]]

SymbolicTable 2:
Key: a --> Value: Boolean value false
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ]
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Compound model.statement: model.statements.IfStatement@176e7cf3 and [Print ([VariableExpression for ID = v]) ]
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print ([VariableExpression for ID = v])
model.statements.IfStatement@176e7cf3
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print ([VariableExpression for ID = v])
model.statements.IfStatement@176e7cf3
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 0]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
[Print ([VariableExpression for ID = v])
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 2:
Heap 2:
]
5_____________________

[ProgramState 2:
Executable Stack 2:
SymbolicTable 2:
Key: a --> Value: Boolean value true
Key: v --> Value: [ INT value 2]
Output 2:
[ INT value 2]Heap 2:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@53009132 and [Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ] ]
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@53009132
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
model.statements.VariableDeclarationStatement@53009132
SymbolicTable 3:
Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 3:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]
 and [Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ] ]
SymbolicTable 3:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 3:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
[New model.statement: varName-> v, expression -> [Value Expression for value = [ INT value 20]]]

SymbolicTable 3:
Key: v --> Value: [ REF value address: 0, location: INT]

Output 3:
Heap 3:
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 3:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: model.statements.VariableDeclarationStatement@3ffbc8e6 and [Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ] ]
SymbolicTable 3:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@3ffbc8e6
SymbolicTable 3:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
model.statements.VariableDeclarationStatement@3ffbc8e6
SymbolicTable 3:
Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]
 and [Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ] ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
[New model.statement: varName-> a, expression -> [VariableExpression for ID = v]]

SymbolicTable 3:
Key: a --> Value: [ REF value address: 0, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Compound model.statement: [Print ([VariableExpression for ID = v]) and [Print ([VariableExpression for ID = a]) ]
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Print ([VariableExpression for ID = a])
[Print ([VariableExpression for ID = v])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Print ([VariableExpression for ID = a])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
[ REF value address: 1, location: INT]
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
[Print ([VariableExpression for ID = a])
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
[ REF value address: 1, location: INT]
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

[ProgramState 3:
Executable Stack 3:
SymbolicTable 3:
Key: a --> Value: [ REF value address: 2, location: REF(INT)]

Key: v --> Value: [ REF value address: 1, location: INT]

Output 3:
[ REF value address: 1, location: INT]
[ REF value address: 2, location: REF(INT)]
Heap 3:
Key: 2 --> Value: [ REF value address: 1, location: INT]

Key: 1 --> Value: [ INT value 20]
]
5_____________________

